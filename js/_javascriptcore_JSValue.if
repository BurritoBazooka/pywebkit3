struct JSValue;
inherit javascriptcore.JSObject;

JSType JSValueGetType(JSContext * ctx, JSValue * value);

bool JSValueIsUndefined(JSContext * ctx, JSValue * value);

bool JSValueIsNull(JSContext * ctx, JSValue * value);

bool JSValueIsBoolean(JSContext * ctx, JSValue * value);

bool JSValueIsNumber(JSContext * ctx, JSValue * value);

bool JSValueIsString(JSContext * ctx, JSValue * value);

bool JSValueIsObject(JSContext * ctx, JSValue * value);

bool JSValueIsObjectOfClass(JSContext * ctx, JSValue * value, JSClass * jsClass);

bool JSValueIsEqual(JSContext * ctx, JSValue * a, JSValue * b, JSValue ** exception);

bool JSValueIsStrictEqual(JSContext * ctx, JSValue * a, JSValue * b);

bool JSValueIsInstanceOfConstructor(JSContext * ctx, JSValue * value, JSObject * constructor, JSValue ** exception);

JSValue * JSValueMakeUndefined(JSContext * ctx);

JSValue * JSValueMakeNull(JSContext * ctx);

JSValue * JSValueMakeBoolean(JSContext * ctx, bool boolean);

JSValue * JSValueMakeNumber(JSContext * ctx, double number);

JSValue * JSValueMakeString(JSContext * ctx, JSString * string);

JSValue * JSValueMakeFromJSONString(JSContext * ctx, JSString * string);

JSString * JSValueCreateJSONString(JSContext * ctx, JSValue * value, unsigned indent, JSValue ** exception);

bool JSValueToBoolean(JSContext * ctx, JSValue * value);

double JSValueToNumber(JSContext * ctx, JSValue * value, JSValue ** exception);

JSString * JSValueToStringCopy(JSContext * ctx, JSValue * value, JSValue ** exception);

JSObject * JSValueToObject(JSContext * ctx, JSValue * value, JSValue ** exception);

void JSValueProtect(JSContext * ctx, JSValue * value);

void JSValueUnprotect(JSContext * ctx, JSValue * value);

