struct GVolume;
inherit gio.GInterface;

char *              g_volume_get_name                   (GVolume *volume);
char *              g_volume_get_uuid                   (GVolume *volume);
GIcon *             g_volume_get_icon                   (GVolume *volume);
GDrive *            g_volume_get_drive                  (GVolume *volume);
GMount *            g_volume_get_mount                  (GVolume *volume);
gboolean            g_volume_can_mount                  (GVolume *volume);
gboolean            g_volume_should_automount           (GVolume *volume);
GFile *             g_volume_get_activation_root        (GVolume *volume);
void                g_volume_mount                      (GVolume *volume,
                                                         GMountMountFlags flags,
                                                         GMountOperation *mount_operation,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
gboolean            g_volume_mount_finish               (GVolume *volume,
                                                         GAsyncResult *result,
                                                         GError **error);
gboolean            g_volume_can_eject                  (GVolume *volume);
void                g_volume_eject                      (GVolume *volume,
                                                         GMountUnmountFlags flags,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
gboolean            g_volume_eject_finish               (GVolume *volume,
                                                         GAsyncResult *result,
                                                         GError **error);
void                g_volume_eject_with_operation       (GVolume *volume,
                                                         GMountUnmountFlags flags,
                                                         GMountOperation *mount_operation,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
gboolean            g_volume_eject_with_operation_finish
                                                        (GVolume *volume,
                                                         GAsyncResult *result,
                                                         GError **error);