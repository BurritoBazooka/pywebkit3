
                    GMainLoop;
inherit            gobject.GObject;
GMainLoop *         g_main_loop_new                     (GMainContext *context,
                                                         gboolean is_running);
GMainLoop *         g_main_loop_ref                     (GMainLoop *loop);
void                g_main_loop_unref                   (GMainLoop *loop);
void                g_main_loop_run                     (GMainLoop *loop);
void                g_main_loop_quit                    (GMainLoop *loop);
gboolean            g_main_loop_is_running              (GMainLoop *loop);
GMainContext *      g_main_loop_get_context             (GMainLoop *loop);
#define             g_main_new                          (is_running)
#define             g_main_destroy                      (loop)
#define             g_main_run                          (loop)
#define             g_main_quit                         (loop)
#define             g_main_is_running                   (loop)

#define             G_PRIORITY_HIGH
#define             G_PRIORITY_DEFAULT
#define             G_PRIORITY_HIGH_IDLE
#define             G_PRIORITY_DEFAULT_IDLE
#define             G_PRIORITY_LOW

#define             G_SOURCE_CONTINUE
#define             G_SOURCE_REMOVE

                    GMainContext;
GMainContext *      g_main_context_new                  (void);
GMainContext *      g_main_context_ref                  (GMainContext *context);
void                g_main_context_unref                (GMainContext *context);
GMainContext *      g_main_context_default              (void);
gboolean            g_main_context_iteration            (GMainContext *context,
                                                         gboolean may_block);
#define             g_main_iteration                    (may_block)
gboolean            g_main_context_pending              (GMainContext *context);
#define             g_main_pending
GSource *           g_main_context_find_source_by_id    (GMainContext *context,
                                                         guint source_id);
GSource *           g_main_context_find_source_by_user_data
                                                        (GMainContext *context,
                                                         gpointer user_data);
GSource *           g_main_context_find_source_by_funcs_user_data
                                                        (GMainContext *context,
                                                         GSourceFuncs *funcs,
                                                         gpointer user_data);
void                g_main_context_wakeup               (GMainContext *context);
gboolean            g_main_context_acquire              (GMainContext *context);
void                g_main_context_release              (GMainContext *context);
gboolean            g_main_context_is_owner             (GMainContext *context);
gboolean            g_main_context_wait                 (GMainContext *context,
                                                         GCond *cond,
                                                         GMutex *mutex);
gboolean            g_main_context_prepare              (GMainContext *context,
                                                         gint *priority);
gint                g_main_context_query                (GMainContext *context,
                                                         gint max_priority,
                                                         gint *timeout_,
                                                         GPollFD *fds,
                                                         gint n_fds);
gint                g_main_context_check                (GMainContext *context,
                                                         gint max_priority,
                                                         GPollFD *fds,
                                                         gint n_fds);
void                g_main_context_dispatch             (GMainContext *context);
void                g_main_context_set_poll_func        (GMainContext *context,
                                                         GPollFunc func);
GPollFunc           g_main_context_get_poll_func        (GMainContext *context);
gint                (*GPollFunc)                        (GPollFD *ufds,
                                                         guint nfsd,
                                                         gint timeout_);
void                g_main_context_add_poll             (GMainContext *context,
                                                         GPollFD *fd,
                                                         gint priority);
void                g_main_context_remove_poll          (GMainContext *context,
                                                         GPollFD *fd);
gint                g_main_depth                        (void);
GSource *           g_main_current_source               (void);
#define             g_main_set_poll_func                (func)
void                g_main_context_invoke               (GMainContext *context,
                                                         GSourceFunc function,
                                                         gpointer data);
void                g_main_context_invoke_full          (GMainContext *context,
                                                         gint priority,
                                                         GSourceFunc function,
                                                         gpointer data,
                                                         GDestroyNotify notify);

GMainContext *      g_main_context_get_thread_default   (void);
GMainContext *      g_main_context_ref_thread_default   (void);
void                g_main_context_push_thread_default  (GMainContext *context);
void                g_main_context_pop_thread_default   (GMainContext *context);

GSource *           g_timeout_source_new                (guint interval);
GSource *           g_timeout_source_new_seconds        (guint interval);
guint               g_timeout_add                       (guint interval,
                                                         GSourceFunc function,
                                                         gpointer data);
guint               g_timeout_add_full                  (gint priority,
                                                         guint interval,
                                                         GSourceFunc function,
                                                         gpointer data,
                                                         GDestroyNotify notify);
guint               g_timeout_add_seconds               (guint interval,
                                                         GSourceFunc function,
                                                         gpointer data);
guint               g_timeout_add_seconds_full          (gint priority,
                                                         guint interval,
                                                         GSourceFunc function,
                                                         gpointer data,
                                                         GDestroyNotify notify);

GSource *           g_idle_source_new                   (void);
guint               g_idle_add                          (GSourceFunc function,
                                                         gpointer data);
guint               g_idle_add_full                     (gint priority,
                                                         GSourceFunc function,
                                                         gpointer data,
                                                         GDestroyNotify notify);
gboolean            g_idle_remove_by_data               (gpointer data);

typedef             GPid;
void                (*GChildWatchFunc)                  (GPid pid,
                                                         gint status,
                                                         gpointer user_data);
GSource *           g_child_watch_source_new            (GPid pid);
guint               g_child_watch_add                   (GPid pid,
                                                         GChildWatchFunc function,
                                                         gpointer data);
guint               g_child_watch_add_full              (gint priority,
                                                         GPid pid,
                                                         GChildWatchFunc function,
                                                         gpointer data,
                                                         GDestroyNotify notify);

struct              GPollFD;
gint                g_poll                              (GPollFD *fds,
                                                         guint nfds,
                                                         gint timeout);
#define             G_POLLFD_FORMAT

struct              GSource;
void                (*GSourceDummyMarshal)              (void);
struct              GSourceFuncs;
struct              GSourceCallbackFuncs;
GSource *           g_source_new                        (GSourceFuncs *source_funcs,
                                                         guint struct_size);
GSource *           g_source_ref                        (GSource *source);
void                g_source_unref                      (GSource *source);
void                g_source_set_funcs                  (GSource *source,
                                                         GSourceFuncs *funcs);
guint               g_source_attach                     (GSource *source,
                                                         GMainContext *context);
void                g_source_destroy                    (GSource *source);
gboolean            g_source_is_destroyed               (GSource *source);
void                g_source_set_priority               (GSource *source,
                                                         gint priority);
gint                g_source_get_priority               (GSource *source);
void                g_source_set_can_recurse            (GSource *source,
                                                         gboolean can_recurse);
gboolean            g_source_get_can_recurse            (GSource *source);
guint               g_source_get_id                     (GSource *source);
const char *        g_source_get_name                   (GSource *source);
void                g_source_set_name                   (GSource *source,
                                                         const char *name);
void                g_source_set_name_by_id             (guint tag,
                                                         const char *name);
GMainContext *      g_source_get_context                (GSource *source);
void                g_source_set_callback               (GSource *source,
                                                         GSourceFunc func,
                                                         gpointer data,
                                                         GDestroyNotify notify);
gboolean            (*GSourceFunc)                      (gpointer user_data);
void                g_source_set_callback_indirect      (GSource *source,
                                                         gpointer callback_data,
                                                         GSourceCallbackFuncs *callback_funcs);
void                g_source_add_poll                   (GSource *source,
                                                         GPollFD *fd);
void                g_source_remove_poll                (GSource *source,
                                                         GPollFD *fd);
void                g_source_add_child_source           (GSource *source,
                                                         GSource *child_source);
void                g_source_remove_child_source        (GSource *source,
                                                         GSource *child_source);
gint64              g_source_get_time                   (GSource *source);
void                g_source_get_current_time           (GSource *source,
                                                         GTimeVal *timeval);
gboolean            g_source_remove                     (guint tag);
gboolean            g_source_remove_by_funcs_user_data  (GSourceFuncs *funcs,
                                                         gpointer user_data);
gboolean            g_source_remove_by_user_data        (gpointer user_data);