
    _cfuncs=[]

    def connect(self,  name, func, *args, **kargs):
        cfunc = None
        def C_Callable():
            try:
                newkargs = kargs
                if newkargs.has_key('cfunc'):
                    del newkargs['cfunc']
                retval = func(*args, **newkargs)
                if not retval:
                    GObject._cfuncs.remove(cfunc)
                    return False
                return retval
            except:
                import traceback
                import logging
                logging.error("Error executing callback:")
                logging.error(traceback.format_exc())
                try:
                    GObject._cfuncs.remove(cfunc)
                except:
                    pass
                return False
        if 'cfunc' in kargs.iterkeys():
            (cfunc, cfunctype) = kargs['cfunc']
        else:
            cfunc = CFUNCTYPE(None)(C_Callable) 
            cfunctype= CFUNCTYPE(None)
        #prevent from gonig out of scope:
        GObject._cfuncs.append(cfunc)
        libgobject.g_signal_connect_data.restype = c_ulonglong
        libgobject.g_signal_connect_data.argtypes = [c_void_p, c_char_p, CFUNCTYPE(None), c_void_p, c_void_p, c_int]
        return libgobject.g_signal_connect_data(self._object, name, cfunc, 0,0,0)


    def __del__(self):
        if self._object:
           libgobject.g_object_unref.argtypes=[c_void_p]
           libgobject.g_object_unref( self._object )

        self._object = None
